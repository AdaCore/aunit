project AUnit_Build is

   type Runtime_Type is ("full", "cert", "kernel", "zfp", "hi", "ravenscar");
   type Target_Type is
     ("native", 
      "powerpc-elf", "erc32-elf", "leon-elf", 
      "powerpc-wrs-vxworksae", powerpc-wrs-vxworks, "i586-wrs-vxworksae");

   Runtime : Runtime_Type := external ("RUNTIME", "full");
   Target  : Target_Type  := external ("PLATFORM", "native");

   for Languages use ("Ada");
   for Object_Dir use "obj/" & Target & "-" & Runtime;
   for Library_Dir use "lib/" & Target & "-" & Runtime;
   for Library_Name use "aunit";
   for Library_Kind use "static";

   for Source_Dirs use ("framework", "containers", "reporters");

   case Runtime is
      when "full" | "cert" | "kernel" =>
         for Source_Dirs use project'Source_Dirs & "framework/exception";
      when "zfp" | "hi" | "ravenscar" =>
         for Languages use project'Languages & "C";
         for Source_Dirs use project'Source_Dirs & "framework/sjljexception";
         for Library_Options use ("sjlj.o");
   end case;

   case Runtime is
      when "full" | "cert" | "kernel" =>
         for Source_Dirs use project'Source_Dirs & "framework/calendar";

      when "zfp" | "hi" | "ravenscar" =>
         for Source_Dirs use project'Source_Dirs & "framework/nocalendar";
   end case;

   case Runtime is
      when "full" | "kernel" =>
         for Source_Dirs use project'Source_Dirs & "framework/nativememory";

      when "cert" | "zfp" | "hi" | "ravenscar" =>
         for Source_Dirs use project'Source_Dirs & "framework/staticmemory";
   end case;

   package Compiler is
      for Default_Switches ("ada") use
        ("-g", "-gnatQ", "-O1", "-gnatf", "-gnato", "-gnatwa.Xe", "-gnaty",
         "-gnat05");
   end Compiler;

   package IDE is
      for VCS_Kind use "Subversion";
   end IDE;

end AUnit_Build;

